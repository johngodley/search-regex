<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards for Gutenberg Plugin">
	<description>Coding standard for Search Regex plugin. Based on WordPress coding standards, but without the annoying Yoda and alignment options</description>

	<config name="testVersion" value="7.0-"/>

	<file>includes/</file>
	<file>search-regex.php</file>
    <exclude-pattern>bin/</exclude-pattern>
    <exclude-pattern>images/</exclude-pattern>
    <exclude-pattern>languages/</exclude-pattern>
    <exclude-pattern>src/</exclude-pattern>
    <exclude-pattern>vendor/</exclude-pattern>
    <exclude-pattern>tests/</exclude-pattern>
    <exclude-pattern>node_modules/</exclude-pattern>
    <exclude-pattern>build/</exclude-pattern>
    <exclude-pattern>.vscode/</exclude-pattern>
    <exclude-pattern>.github/</exclude-pattern>

	<rule ref="WordPress-Core">
		<!-- these I dont like -->
		<exclude name="WordPress.PHP.YodaConditions.NotYoda"/>
		<exclude name="WordPress.Arrays.MultipleStatementAlignment.DoubleArrowNotAligned"/>
		<exclude name="Generic.Formatting.MultipleStatementAlignment.NotSameWarning"/>
		<exclude name="WordPress.Files.FileName.InvalidClassFileName"/>

		<!-- documentation warnings -->
		<exclude name="Squiz.Commenting.FunctionComment.Missing"/>
		<exclude name="Squiz.Commenting.FileComment.Missing"/>
		<exclude name="Squiz.Commenting.ClassComment.Missing"/>
		<exclude name="Squiz.Commenting.VariableComment.Missing"/>
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>
		<exclude name="Squiz.Commenting.FileComment.WrongStyle"/>
		<exclude name="Squiz.Commenting.FunctionComment.WrongStyle"/>
		<exclude name="Generic.Commenting.DocComment.MissingShort"/>
		<exclude name="VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable"/>
		<exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments"/>
	</rule>

    <rule ref="Generic.Arrays">
        <exclude name="Generic.Arrays.DisallowShortArraySyntax"/>
        <exclude name="Generic.Arrays.DisallowLongArraySyntax.Found"/>
    </rule>

    <rule ref="Universal.Arrays">
        <exclude name="Universal.Arrays.DisallowShortArraySyntax"/>
    </rule>

	<rule ref="WordPress-Docs"/>
	<rule ref="WordPress-Extra"/>
	<rule ref="WordPress.WP.I18n"/>
	<config name="text_domain" value="search-regex,default"/>

	<rule ref="VariableAnalysis.CodeAnalysis.VariableAnalysis"/>

	<rule ref="PEAR.Functions.FunctionCallSignature">
		<properties>
			<property name="allowMultipleArguments" value="false"/>
		</properties>
	</rule>

	<rule ref="WordPress.WP.I18n.MissingArgDomainDefault" />

	<arg value="ps"/>
	<arg name="extensions" value="php"/>
	<arg name="colors"/>
    <arg name="tab-width" value="4"/>

	<rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <rule ref="Squiz.Operators.IncrementDecrementUsage"/>
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <rule ref="Squiz.Functions.FunctionDuplicateArgument"/>
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
    <rule ref="PEAR.Files.IncludingFile"/>
    <rule ref="PEAR.Files.IncludingFile.UseInclude">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Files.IncludingFile.UseIncludeOnce">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Files.IncludingFile.BracketsNotRequired">
        <type>warning</type>
    </rule>
    <rule ref="PEAR.Files.IncludingFile.UseRequire">
        <type>warning</type>
    </rule>
    <rule ref="PEAR.Files.IncludingFile.UseRequireOnce">
        <type>warning</type>
    </rule>
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>warning</type>
    </rule>
	    <rule ref="WordPress.Security.EscapeOutput"/>

    <!-- Encourage use of wp_safe_redirect() to avoid open redirect vulnerabilities.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/pull/1264 -->
    <rule ref="WordPress.Security.SafeRedirect"/>

    <!-- Verify that a nonce check is done before using values in superglobals.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/73 -->
    <rule ref="WordPress.Security.NonceVerification"/>

    <rule ref="WordPress.PHP.DevelopmentFunctions"/>
    <rule ref="WordPress.PHP.DiscouragedPHPFunctions"/>
    <rule ref="WordPress.WP.DeprecatedFunctions"/>
    <rule ref="WordPress.WP.DeprecatedClasses"/>
    <rule ref="WordPress.WP.DeprecatedParameters"/>
    <rule ref="WordPress.WP.DeprecatedParameterValues"/>
    <rule ref="WordPress.WP.AlternativeFunctions"/>
    <rule ref="WordPress.WP.DiscouragedConstants"/>
    <rule ref="WordPress.WP.DiscouragedFunctions"/>
    <rule ref="WordPress.WP.EnqueuedResources"/>

    <!-- Warn against overriding WP global variables.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/26 -->
    <rule ref="WordPress.WP.GlobalVariablesOverride"/>

        <!-- Check that in_array() and array_search() use strict comparisons.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/399
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/503 -->
    <rule ref="WordPress.PHP.StrictInArray"/>

    <!-- Make the translators comment check which is included in core stricter. -->
    <rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
        <type>error</type>
    </rule>
    <rule ref="WordPress.WP.I18n.TranslatorsCommentWrongStyle">
        <type>error</type>
    </rule>
    <!-- Verify that everything in the global namespace is prefixed. -->
    <rule ref="WordPress.NamingConventions.PrefixAllGlobals"/>

    <!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1157 -->
    <rule ref="WordPress.Security.PluginMenuSlug"/>
    <rule ref="WordPress.WP.CronInterval"/>
    <rule ref="WordPress.WP.PostsPerPage"/>
	<rule ref="WordPress.PHP.PregQuoteDelimiter"/>

    <!-- Commented out code should not be committed.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/pull/1463 -->
    <rule ref="Squiz.PHP.CommentedOutCode">
        <properties>
            <property name="maxPercentage" value="40"/>
        </properties>
    </rule>

    <!-- Check for single blank line after namespace declaration. -->
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>

    <!-- Check enqueue and register styles and scripts to have version and in_footer parameters explicitly set.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1146 -->
    <rule ref="WordPress.WP.EnqueuedResourceParameters"/>

    <!-- Discourage use of the backtick operator (execution of shell commands).
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/pull/646 -->
    <rule ref="Generic.PHP.BacktickOperator"/>

    <!-- Check for PHP Parse errors.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/522 -->
    <rule ref="Generic.PHP.Syntax"/>

    <!-- Covers rule: Use single and double quotes when appropriate.
         If you're not evaluating anything in the string, use single quotes. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule>
	    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="exact" value="false"/>
            <property name="indent" value="4"/>
            <property name="tabIndent" value="true"/>
            <property name="ignoreIndentationTokens" type="array" value="T_HEREDOC,T_NOWDOC,T_INLINE_HTML"/>
        </properties>
    </rule>
    <rule ref="WordPress.Arrays.ArrayIndentation"/>

    <!-- Covers rule: Use real tabs and not spaces. -->
    <rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

    <!-- Generic array layout check. -->
    <!-- Covers rule: For associative arrays, values should start on a new line.
         Also covers various single-line array whitespace issues. -->
    <rule ref="WordPress.Arrays.ArrayDeclarationSpacing"/>

    <!-- Covers rule: For switch structures case should indent one tab from the
         switch statement and break one tab from the case statement. -->
    <rule ref="PSR2.ControlStructures.SwitchDeclaration">
        <!-- Prevent duplicate messages for the same issue. Covered by other sniffs. -->
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.NotLower"/>
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.BreakNotNewLine"/>
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.BodyOnNextLine"/>
    </rule>

    <!-- Covers rule: ... while spaces can be used mid-line for alignment. -->
    <rule ref="Squiz.ControlStructures.ControlSignature"/>

    <!-- Covers rule: Braces should always be used, even when they are not required. -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>


    <!--
    #############################################################################
    Handbook: PHP - Regular Expressions.
    Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#regular-expressions
    #############################################################################
    -->
    <!-- Covers rule: Perl compatible regular expressions should be used in preference
         to their POSIX counterparts. -->
    <rule ref="WordPress.PHP.POSIXFunctions"/>

    <!-- Rule: Never use the /e switch, use preg_replace_callback instead.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/632 -->

    <!-- Rule: It's most convenient to use single-quoted strings for regular expressions.
         Already covered by Squiz.Strings.DoubleQuoteUsage -->


    <!--
    #############################################################################
    Handbook: PHP - Opening and Closing PHP Tags.
    Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#opening-and-closing-php-tags
    #############################################################################
    -->
    <!-- Covers rule: When embedding multi-line PHP snippets within a HTML block, the
         PHP open and close tags must be on a line by themselves. -->
    <rule ref="Squiz.PHP.EmbeddedPhp">
        <exclude name="Squiz.PHP.EmbeddedPhp.SpacingBefore"/>
        <exclude name="Squiz.PHP.EmbeddedPhp.Indent"/>
        <exclude name="Squiz.PHP.EmbeddedPhp.OpenTagIndent"/>
        <exclude name="Squiz.PHP.EmbeddedPhp.SpacingAfter"/>
    </rule>
	    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Generic.PHP.DisallowAlternativePHPTags"/>



    <!--
    #############################################################################
    Handbook: PHP - Remove Trailing Spaces.
    Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#remove-trailing-spaces
    #############################################################################
    -->
    <!-- Covers rule: Remove trailing whitespace at the end of each line of code. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

    <!-- Covers rule: Omitting the closing PHP tag at the end of a file is preferred. -->
    <rule ref="PSR2.Files.ClosingTag"/>


    <!--
    #############################################################################
    Handbook: PHP - Space Usage.
    Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#space-usage
    #############################################################################
    -->
    <!-- Covers rule: Always put spaces after commas, and on both sides of logical,
         comparison, string and assignment operators. -->
    <rule ref="WordPress.WhiteSpace.OperatorSpacing"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Covers rule: Put spaces on both sides of the opening and closing parenthesis of
         if, elseif, foreach, for, and switch blocks. -->
    <rule ref="WordPress.WhiteSpace.ControlStructureSpacing"/>


    <!-- Covers rule: Define a function like so: function my_function( $param1 = 'foo', $param2 = 'bar' ) { -->
    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
        <properties>
            <property name="checkClosures" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>
        </properties>
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingBeforeClose"/>
    </rule>

    <!-- Covers rule: Call a function, like so: my_function( $param1, func_param( $param2 ) ); -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>
        </properties>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity phpcs-only="true">0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity phpcs-only="true">0</severity>
    </rule>

    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

    <!-- Rule: Perform logical comparisons, like so: if ( ! $foo ) { -->

    <!-- Covers rule: When type casting, do it like so: $foo = (boolean) $bar; -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <rule ref="WordPress.WhiteSpace.CastStructureSpacing"/>

    <!-- Covers rule: ... array items, only include a space around the index if it is a variable. -->
    <rule ref="WordPress.Arrays.ArrayKeySpacingRestrictions"/>

    <!-- Rule: In a switch block, there must be no space before the colon for a case statement. -->
    <!-- Covered by the PSR2.ControlStructures.SwitchDeclaration sniff. -->

    <!-- Rule: Similarly, there should be no space before the colon on return type declarations. -->


    <!--
    #############################################################################
    Handbook: PHP - Formatting SQL statements.
    Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#formatting-sql-statements
    #############################################################################
    -->
    <!-- Rule: Always capitalize the SQL parts of the statement like UPDATE or WHERE.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/639 -->

    <!-- Rule: Functions that update the database should expect their parameters to lack
         SQL slash escaping when passed.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/640 -->

    <!-- Rule: in $wpdb->prepare - only %s and %d are used as placeholders. Note that they are not "quoted"! -->
    <rule ref="WordPress.DB.PreparedSQLPlaceholders"/>

    <!-- Covers rule: Escaping should be done as close to the time of the query as possible,
         preferably by using $wpdb->prepare() -->
    <rule ref="WordPress.DB.PreparedSQL"/>
   <rule ref="WordPress.DB.RestrictedFunctions"/>
    <rule ref="WordPress.DB.RestrictedClasses"/>


    <!--
    #############################################################################
    Handbook: PHP - Naming Conventions.
    Ref: https://make.wordpress.org/core/handbook/coding-standards/php/#naming-conventions
    #############################################################################
    -->
    <!-- Covers rule: Use lowercase letters in variable, action, and function names.
         Separate words via underscores. -->
    <rule ref="WordPress.NamingConventions.ValidFunctionName"/>
    <rule ref="WordPress.NamingConventions.ValidHookName"/>
    <rule ref="WordPress.NamingConventions.ValidVariableName"/>

    <!-- Covers rule: Class names should use capitalized words separated by underscores. -->
    <rule ref="PEAR.NamingConventions.ValidClassName"/>

    <!-- Covers rule: Constants should be in all upper-case with underscores separating words. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- Rule: In a switch statement... If a case contains a block, then falls through
         to the next block, this must be explicitly commented. -->
    <!-- Covered by the PSR2.ControlStructures.SwitchDeclaration sniff. -->

    <!-- Rule: The eval() construct is very dangerous, and is impossible to secure. ... these must not be used. -->
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Squiz.PHP.Eval.Discouraged">
        <type>error</type>
        <message>eval() is a security risk so not allowed.</message>
    </rule>

    <!-- Rule: create_function() function, which internally performs an eval(),
         is deprecated in PHP 7.2. Both of these must not be used. -->
    <rule ref="WordPress.PHP.RestrictedPHPFunctions"/>

	<!-- Ignore snake case error in parser -->
	<rule ref="WordPress.NamingConventions.ValidVariableName.PropertyNotSnakeCase">
	</rule>
	<rule ref="WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase">
	</rule>
	<rule ref="WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase">
	</rule>
	<!-- Ignore filename error since it requires WP core build process change -->
	<rule ref="WordPress.Files.FileName.InvalidClassFileName">
	</rule>

	<rule ref="VariableAnalysis"/>
	<rule ref="VariableAnalysis.CodeAnalysis.VariableAnalysis.UndefinedVariable">
		<type>error</type>
	</rule>

    <rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="search-regex"/>
			</property>
		</properties>
	</rule>
</ruleset>
